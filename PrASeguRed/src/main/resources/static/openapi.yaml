openapi: 3.1.0
info:
  title: API Gestión Usuarios y Reportes
  description: API para registro, autenticación, administración de cuentas y reportes
  version: 1.6.3
servers:
  - url: /
  - url: https://localhost:8080

components:
  schemas:
    Location:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        name:
          type: string

    Imagen:
      type: object
      properties:
        url:
          type: string
          format: uri
        descripcion:
          type: string

    Categoria:
      type: object
      properties:
        nombre:
          type: string
        descripcion:
          type: string

    ESTADOREPORTE:
      type: string
      enum:
        - Pendiente
        - Completado
        - Denegado
        - Eliminado
      description: Estado del reporte

    Usuario:
      type: object
      required:
        - tpDocumento
        - documento
        - nombreCom
        - fechaNacimiento
        - ciudadResidencia
        - telefono
        - estado
        - correo
        - contraseña
      properties:
        id:
          type: string
          description: ID único del usuario (generado automáticamente)
        tpDocumento:
          type: string
          description: Tipo de documento del usuario
          example: "CC"
        documento:
          type: string
          description: Número de documento del usuario
          example: "12345678"
        nombreCom:
          type: string
          description: Nombre completo del usuario
          example: "Juan Pérez"
        fechaNacimiento:
          type: string
          format: date
          description: Fecha de nacimiento del usuario
          example: "2000-01-01"
        ciudadResidencia:
          type: string
          description: Ciudad de residencia del usuario
          example: "Bogotá"
        direccion:
          type: string
          description: Dirección del usuario
          example: "Av. Siempre Viva 123"
        telefono:
          type: string
          description: Teléfono del usuario
          example: "3123456789"
        rol:
          type: string
          description: "Rol del usuario (se asigna automáticamente como USUARIO, no es necesario enviarlo)"
          example: "USUARIO"
          readOnly: true  # Marca el campo como solo lectura
        estado:
          type: string
          description: Estado del usuario
          example: "EN_ESPERA"
        correo:
          type: string
          format: email
          description: Correo electrónico del usuario
          example: "juan.perez@example.com"
        preferencias:
          type: string
          description: Preferencias del usuario
          example: "Notificaciones por correo"
        contraseña:
          type: string
          description: Contraseña del usuario
          example: "password123"
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
          description: Ubicaciones asociadas al usuario

    Verificacion:
      type: object
      properties:
        codigoVerificacion:
          type: string
          description: Código de verificación del usuario

    Autenticacion:
      type: object
      properties:
        correo:
          type: string
          format: email
          description: Correo electrónico del usuario
        contraseña:
          type: string
          description: Contraseña del usuario

    ActualizacionCuenta:
      type: object
      properties:
        nombreCom:
          type: string
          description: Nuevo nombre completo del usuario
        ciudadResidencia:
          type: string
          description: Nueva ciudad de residencia del usuario
        direccion:
          type: string
          description: Nueva dirección del usuario
        telefono:
          type: string
          description: Nuevo teléfono del usuario
        correo:
          type: string
          format: email
          description: Nuevo correo electrónico del usuario
        preferencias:
          type: string
          description: Nuevas preferencias del usuario

    EliminacionCuenta:
      type: object
      properties:
        confirmacion:
          type: boolean
          description: Confirmación de eliminación de la cuenta

    ReporteRequest:
      type: object
      required:
        - titulo
        - descripcion
      properties:
        id:
          type: string
          description: ID del reporte (opcional, generado automáticamente si no se proporciona)
        titulo:
          type: string
          description: Título del reporte
          example: "Alumbrado público dañado"
        descripcion:
          type: string
          description: Descripción detallada del reporte
          example: "El alumbrado de la calle principal está sin funcionar desde hace tres días"
        categoria:
          type: array
          items:
            $ref: '#/components/schemas/Categoria'
          description: Categorías a las que pertenece el reporte
        locations:
          type: object
          $ref: '#/components/schemas/Location'
          description: Ubicación del incidente reportado
        imagenes:
          type: array
          items:
            $ref: '#/components/schemas/Imagen'
          description: Imágenes asociadas al reporte

    ReporteDTO:
      type: object
      properties:
        id:
          type: string
          description: ID único del reporte
        idUsuario:
          type: string
          description: ID del usuario que creó el reporte
        estado:
          $ref: '#/components/schemas/ESTADOREPORTE'
        titulo:
          type: string
          description: Título del reporte
        fechaPublicacion:
          type: string
          format: date-time
          description: Fecha en que se publicó el reporte
          example: "2025-05-15T15:29:53Z"
        fechaActualizacion:
          type: string
          format: date-time
          description: Fecha de la última actualización del reporte
          example: "2025-05-15T15:29:53Z"
        descripcion:
          type: string
          description: Descripción detallada del reporte
        likes:
          type: integer
          description: Número de "me gusta" que tiene el reporte
        categoria:
          type: array
          items:
            $ref: '#/components/schemas/Categoria'
          description: Categorías a las que pertenece el reporte
        location:
          $ref: '#/components/schemas/Location'
          description: Ubicación del incidente reportado
        imagenes:
          type: array
          items:
            $ref: '#/components/schemas/Imagen'
          description: Imágenes asociadas al reporte

    Comentario:
      type: object
      properties:
        usuarioId:
          type: string
          description: ID del usuario que hace el comentario
        reporteId:
          type: string
          description: ID del reporte que se comenta
        contenido:
          type: string
          description: Contenido del comentario
        fechaCreacion:
          type: string
          format: date-time
          description: Fecha de creación del comentario
        estado:
          type: string
          enum: [Activo, Inactivo, Borrado]
          description: Estado del comentario

    Notificacion:
      type: object
      properties:
        usuarioId:
          type: string
          description: ID del usuario que recibe la notificación
        titulo:
          type: string
          description: Título de la notificación
        categoria:
          type: string
          description: Categoría de la notificación
        contenido:
          type: string
          description: Contenido de la notificación
        leido:
          type: boolean
          description: Estado de la notificación (leído/no leído)
        fechaCreacion:
          type: string
          format: date-time
          description: Fecha de creación de la notificación

    VerificationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "usuario@ejemplo.com"
        code:
          type: string
          example: "123456"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /registro/usuario:
    post:
      summary: Registro usuario
      description: Registro de un nuevo usuario en el sistema
      operationId: registroUsuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
            examples:
              usuario:
                value:
                  tpDocumento: "CC"
                  documento: "12345678"
                  nombreCom: "Juan Pérez"
                  fechaNacimiento: "2000-01-01"
                  ciudadResidencia: "Bogotá"
                  direccion: "Av. Siempre Viva 123"
                  telefono: "3123456789"
                  rol: "USUARIO"
                  estado: "EN_ESPERA"
                  correo: "juan.perez@example.com"
                  preferencias: "Notificaciones por correo"
                  contraseña: "password123"
                  locations: []
      responses:
        "201":
          description: Registro exitoso y envío de código de verificación.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registro exitoso y envío de código de verificación.
        "400":
          description: Error de validación o datos incompletos
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error en los datos proporcionados

  /email:
    post:
      summary: Código verificación - envío
      description: Envío de correo con el código de verificación al usuario registrado
      operationId: codigoVerificacionEnvio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verificacion'
      responses:
        "200":
          description: Código enviado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Código enviado correctamente.

  /auth/login:
    post:
      summary: Inicio sesión
      description: Autenticación de usuario por correo y contraseña
      operationId: inicioSesion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Autenticacion'
            examples:
              credenciales:
                value:
                  correo: "william19dahora@example.com"
                  contraseña: "password123"
      responses:
        "200":
          description: Inicio de sesión exitoso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token de autenticación
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ3aWxsaWFtMTlkYWhvcmFAZXhhbXBsZS5jb20iLCJpYXQiOjE2MjU3NjkzOTMsImV4cCI6MTYyNTg1NTc5M30.example_token"
        "401":
          description: Credenciales incorrectas.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Credenciales incorrectas.

  /cuenta:
    patch:
      summary: Actualización cuenta
      description: Modificación de datos personales
      operationId: cuentaActualizacion
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActualizacionCuenta'
            examples:
              actualizarCuenta:
                value:
                  nombreCom: "William Martínez"
                  ciudadResidencia: "Medellín"
                  direccion: "Calle 123 #45-67"
                  telefono: "3001234567"
                  correo: "william.new@example.com"
                  preferencias: "Notificaciones solo por correo"
      responses:
        "200":
          description: Datos actualizados correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Datos actualizados correctamente.
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado

    delete:
      summary: Eliminación cuenta
      description: Eliminación definitiva de la cuenta del usuario
      operationId: cuentaEliminacion
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EliminacionCuenta'
            examples:
              eliminarCuenta:
                value:
                  confirmacion: true
      responses:
        "200":
          description: Cuenta eliminada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cuenta eliminada.
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado

  /cuenta/password:
    post:
      summary: Solicitud de recuperación de contraseña
      description: Envía un código de verificación al correo electrónico del usuario para iniciar el proceso de recuperación de contraseña.
      operationId: solicitarRecuperacionPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                correo:
                  type: string
                  format: email
                  description: Correo electrónico de la cuenta cuya contraseña se desea recuperar.
            examples:
              solicitudRecuperacion:
                value:
                  correo: "usuario@ejemplo.com"
      responses:
        "200":
          description: Código de verificación enviado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Se ha enviado un código de verificación a su correo electrónico.
        "404":
          description: Correo electrónico no asociado a ninguna cuenta.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No existe una cuenta asociada a este correo electrónico.
        "500":
          description: Error al enviar el correo electrónico.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error al enviar el código de verificación.

  /cuenta/nueva-password:
    put:
      summary: Establecer nueva contraseña
      description: Establece una nueva contraseña tras verificar el código de recuperación enviado al correo.
      operationId: establecerNuevaPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                correo:
                  type: string
                  format: email
                  description: Correo electrónico de la cuenta.
                codigo:
                  type: string
                  description: Código de verificación enviado al correo electrónico.
                nuevaContraseña:
                  type: string
                  description: Nueva contraseña elegida por el usuario.
            examples:
              resetPassword:
                value:
                  correo: "usuario@ejemplo.com"
                  codigo: "123456"
                  nuevaContraseña: "NuevaPassword123!"
      responses:
        "200":
          description: Contraseña actualizada correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contraseña actualizada correctamente.
        "400":
          description: Código de verificación inválido o expirado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: El código de verificación es inválido o ha expirado.
        "404":
          description: Correo electrónico no asociado a ninguna cuenta.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No existe una cuenta asociada a este correo electrónico.

  /reportes:
    get:
      summary: Obtener todos los reportes
      description: Recupera una lista de todos los reportes disponibles
      operationId: obtenerTodosReportes
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Lista de reportes obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReporteDTO'
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado

    post:
      summary: Creación reporte
      description: Creación de un nuevo reporte en el sistema
      operationId: reporteCreacion
      security:
        - bearerAuth: [ ]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Token de autenticación JWT (con prefijo 'Bearer ')
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ3aWxsaWFtMTlkYWhvcmFAZXhhbXBsZS5jb20iLCJpYXQiOjE2MjU3NjkzOTMsImV4cCI6MTYyNTg1NTc5M30.example_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReporteRequest'
            examples:
              nuevoReporte:
                value:
                  titulo: "Semáforo averiado"
                  descripcion: "El semáforo de la intersección principal no está funcionando correctamente desde ayer"
                  categoria: [
                    {
                      "nombre": "Infraestructura",
                      "descripcion": "Problemas relacionados con infraestructura urbana"
                    }
                  ]
                  locations: {
                    "latitude": 4.55001,
                    "longitude": -75.6561,
                    "name": "Intersección Av. Principal y Calle 25"
                  }
                  imagenes: [
                    {
                      "url": "https://example.com/images/semaforo1.jpg",
                      "descripcion": "Vista frontal del semáforo"
                    },
                    {
                      "url": "https://example.com/images/semaforo2.jpg",
                      "descripcion": "Vista lateral"
                    }
                  ]
      responses:
        "201":
          description: Reporte creado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reporte creado exitosamente.
                  reporte:
                    $ref: '#/components/schemas/ReporteDTO'
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado
        "400":
          description: Datos del reporte inválidos o encabezado requerido faltante
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Required header 'Authorization' is not present.

  /reportes/{id}:
    get:
      summary: Obtener un reporte específico
      description: Recupera un reporte por su ID
      operationId: obtenerReportePorId
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: ID del reporte a obtener
      responses:
        "200":
          description: Reporte recuperado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReporteDTO'
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado
        "404":
          description: Reporte no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Reporte no encontrado

    put:
      summary: Actualización reporte
      description: Modificación de un reporte existente
      operationId: reporteActualizacion
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: ID del reporte a actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReporteRequest'
            examples:
              actualizarReporte:
                value:
                  titulo: "Semáforo averiado - URGENTE"
                  descripcion: "El semáforo de la intersección principal sigue sin funcionar y ya está causando accidentes"
                  categoria: [
                    {
                      "nombre": "Infraestructura",
                      "descripcion": "Problemas relacionados con infraestructura urbana"
                    },
                    {
                      "nombre": "Urgente",
                      "descripcion": "Situaciones que requieren atención inmediata"
                    }
                  ]
                  locations: {
                    "latitude": 4.55001,
                    "longitude": -75.6561,
                    "name": "Intersección Av. Principal y Calle 25"
                  }
                  imagenes: [
                    {
                      "url": "https://example.com/images/semaforo1.jpg",
                      "descripcion": "Vista frontal del semáforo"
                    },
                    {
                      "url": "https://example.com/images/semaforo2.jpg",
                      "descripcion": "Vista lateral"
                    },
                    {
                      "url": "https://example.com/images/accidente.jpg",
                      "descripcion": "Accidente causado por el semáforo"
                    }
                  ]
      responses:
        "200":
          description: Reporte actualizado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reporte actualizado exitosamente.
                  reporte:
                    $ref: '#/components/schemas/ReporteDTO'
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado
        "404":
          description: Reporte no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Reporte no encontrado

    delete:
      summary: Eliminación reporte
      description: Marca el reporte como eliminado (cambia su estado a Eliminado)
      operationId: reporteEliminacion
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: ID del reporte a eliminar
      responses:
        "200":
          description: Reporte eliminado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reporte eliminado correctamente.
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado
        "404":
          description: Reporte no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Reporte no encontrado

  /reportes/{id}/completar:
    put:
      summary: Marcar reporte como completado
      description: Cambia el estado del reporte a Completado
      operationId: marcarReporteComoCompletado
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: ID del reporte a marcar como completado
      responses:
        "200":
          description: Reporte marcado como completado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reporte marcado como completado.
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado
        "404":
          description: Reporte no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Reporte no encontrado

  /reportes/{id}/denegar:
    put:
      summary: Marcar reporte como denegado
      description: Cambia el estado del reporte a Denegado
      operationId: marcarReporteComoDenegado
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: ID del reporte a marcar como denegado
      responses:
        "200":
          description: Reporte marcado como denegado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reporte marcado como denegado.
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado
        "404":
          description: Reporte no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Reporte no encontrado

  /comentarios:
    post:
      summary: Creación comentario
      description: Creación de un nuevo comentario en un reporte
      operationId: comentarioCreacion
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comentario'
            examples:
              nuevoComentario:
                value:
                  reporteId: "60b9b42c7e6e1d001f9a4321"
                  contenido: "Ya he notificado este problema a las autoridades también por teléfono."
      responses:
        "201":
          description: Comentario creado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comentario creado exitosamente.
                  comentario:
                    $ref: '#/components/schemas/Comentario'
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado

  /comentario/{id}:
    patch:
      summary: Actualización comentario
      description: Modificación de un comentario existente
      operationId: comentarioActualizacion
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: ID del comentario a actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comentario'
            examples:
              actualizarComentario:
                value:
                  contenido: "Ya he notificado este problema a las autoridades también por teléfono. Me informaron que enviarán un técnico mañana."
      responses:
        "200":
          description: Comentario actualizado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comentario actualizado.
                  comentario:
                    $ref: '#/components/schemas/Comentario'
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado
        "404":
          description: Comentario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Comentario no encontrado

    delete:
      summary: Eliminación comentario
      description: Eliminación definitiva del comentario
      operationId: comentarioEliminacion
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: ID del comentario a eliminar
      responses:
        "200":
          description: Comentario eliminado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comentario eliminado correctamente.
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado
        "404":
          description: Comentario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Comentario no encontrado

  /comentario/usuario/{usuarioId}:
    get:
      summary: Obtener comentarios por usuario
      description: Obtiene todos los comentarios realizados por un usuario específico
      operationId: obtenerComentariosPorUsuario
      security:
        - bearerAuth: []
      parameters:
        - name: usuarioId
          in: path
          required: true
          schema:
            type: string
            description: ID del usuario cuyos comentarios se desean obtener
      responses:
        "200":
          description: Comentarios obtenidos correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comentario'
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado

  /comentario:
    get:
      summary: Obtener todos los comentarios
      description: Obtiene todos los comentarios realizados por todos los usuarios
      operationId: obtenerTodosLosComentarios
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Todos los comentarios obtenidos correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comentario'
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado

  /notificacion:
    post:
      summary: Enviar notificación
      description: Enviar una notificación a un usuario o admin
      operationId: enviarNotificacion
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notificacion'
            examples:
              nuevaNotificacion:
                value:
                  usuarioId: "60b9b42c7e6e1d001f9a4321"
                  titulo: "Su reporte ha sido atendido"
                  categoria: "Actualización"
                  contenido: "El equipo técnico ya está trabajando en la reparación del semáforo que usted reportó."
                  leido: false
      responses:
        "201":
          description: Notificación enviada correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notificación enviada correctamente.
                  notificacion:
                    $ref: '#/components/schemas/Notificacion'
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado

  /notificaciones/usuario/{usuarioId}:
    get:
      summary: Obtener notificaciones por usuario
      description: Obtiene todas las notificaciones enviadas a un usuario específico
      operationId: obtenerNotificacionesPorUsuario
      security:
        - bearerAuth: []
      parameters:
        - name: usuarioId
          in: path
          required: true
          schema:
            type: string
            description: ID del usuario cuyas notificaciones se desean obtener
      responses:
        "200":
          description: Notificaciones obtenidas correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notificacion'
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Usuario no encontrado

  /notificaciones:
    get:
      summary: Obtener todas las notificaciones
      description: Obtiene todas las notificaciones enviadas a todos los usuarios y administradores
      operationId: obtenerTodasLasNotificaciones
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Todas las notificaciones obtenidas correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notificacion'
        "401":
          description: No autenticado o token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token inválido o expirado

  /suscripcion/noticias:
    post:
      summary: Suscripción a noticias
      description: Permite a un usuario suscribirse proporcionando su correo electrónico.
      operationId: suscripcionNoticias
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                correo:
                  type: string
                  format: email
                  description: Correo electrónico del usuario que desea suscribirse.
            examples:
              suscripcion:
                value:
                  correo: "william19dahora@example.com"
      responses:
        "200":
          description: Suscripción exitosa.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Suscripción realizada con éxito.
        "400":
          description: Solicitud incorrecta (correo inválido o faltante).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: El correo es requerido.
        "500":
          description: Error interno al enviar el correo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error al enviar el correo.

  /auth/codigo-usuario:
    post:
      summary: Enviar código de verificación
      description: Envía un código de verificación de 6 dígitos al correo proporcionado.
      operationId: enviarCodigo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "usuario@ejemplo.com"
            examples:
              enviarCodigo:
                value:
                  email: "william19dahora@example.com"
      responses:
        "200":
          description: Código enviado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Código enviado correctamente
        "500":
          description: Error al enviar el código
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error al enviar el código

  /auth/token:
    post:
      summary: Verificar código de verificación
      description: Verifica si el código ingresado es correcto y no ha expirado.
      operationId: verificarCodigo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationRequest'
            examples:
              verificarCodigo:
                value:
                  email: "william19dahora@example.com"
                  code: "123456"
      responses:
        "200":
          description: Código verificado correctamente
          content:
            application/json:
              schema:
                type: string
                example: "Código verificado correctamente"
        "400":
          description: Código incorrecto o expirado
          content:
            application/json:
              schema:
                type: string
                example: "Código incorrecto o expirado"

  /auth/usuario-datos:
    post:
      summary: Validar token JWT y obtener datos del usuario
      description: Recibe un token JWT en el encabezado y devuelve los datos completos del usuario asociado al token.
      operationId: obtenerDatosUsuario
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Token JWT con prefijo "Bearer "
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        "200":
          description: Token válido, datos de usuario obtenidos correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        "401":
          description: Token inválido o expirado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Token inválido o expirado"
        "404":
          description: Usuario no encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Usuario no encontrado"
